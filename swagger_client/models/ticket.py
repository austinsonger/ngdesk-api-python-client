# coding: utf-8

"""
    ngDesk_Operations

    ngDesk_Operations

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ticket(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_id': 'int',
        'subject': 'str',
        'date_required_by': 'datetime',
        'severity': 'str',
        'date_created': 'datetime',
        'source': 'str',
        'ticket_uuid': 'str',
        'status': 'str',
        'is_internal': 'str',
        'requestor_group_user_id': 'int',
        'assignee_group_user_id': 'int',
        'owner_group_user_id': 'int',
        'requestor_name': 'str',
        'owner_name': 'str',
        'assignee_name': 'str',
        'owner_account_name': 'str',
        'ticket_messages': 'list[TicketMessage]'
    }

    attribute_map = {
        'ticket_id': 'TICKET_ID',
        'subject': 'SUBJECT',
        'date_required_by': 'DATE_REQUIRED_BY',
        'severity': 'SEVERITY',
        'date_created': 'DATE_CREATED',
        'source': 'SOURCE',
        'ticket_uuid': 'TICKET_UUID',
        'status': 'STATUS',
        'is_internal': 'IS_INTERNAL',
        'requestor_group_user_id': 'REQUESTOR_GROUP_USER_ID',
        'assignee_group_user_id': 'ASSIGNEE_GROUP_USER_ID',
        'owner_group_user_id': 'OWNER_GROUP_USER_ID',
        'requestor_name': 'REQUESTOR_NAME',
        'owner_name': 'OWNER_NAME',
        'assignee_name': 'ASSIGNEE_NAME',
        'owner_account_name': 'OWNER_ACCOUNT_NAME',
        'ticket_messages': 'TICKET_MESSAGES'
    }

    def __init__(self, ticket_id=None, subject=None, date_required_by=None, severity=None, date_created=None, source=None, ticket_uuid=None, status=None, is_internal=None, requestor_group_user_id=None, assignee_group_user_id=None, owner_group_user_id=None, requestor_name=None, owner_name=None, assignee_name=None, owner_account_name=None, ticket_messages=None):
        """
        Ticket - a model defined in Swagger
        """

        self._ticket_id = None
        self._subject = None
        self._date_required_by = None
        self._severity = None
        self._date_created = None
        self._source = None
        self._ticket_uuid = None
        self._status = None
        self._is_internal = None
        self._requestor_group_user_id = None
        self._assignee_group_user_id = None
        self._owner_group_user_id = None
        self._requestor_name = None
        self._owner_name = None
        self._assignee_name = None
        self._owner_account_name = None
        self._ticket_messages = None

        if ticket_id is not None:
          self.ticket_id = ticket_id
        if subject is not None:
          self.subject = subject
        if date_required_by is not None:
          self.date_required_by = date_required_by
        if severity is not None:
          self.severity = severity
        if date_created is not None:
          self.date_created = date_created
        if source is not None:
          self.source = source
        if ticket_uuid is not None:
          self.ticket_uuid = ticket_uuid
        if status is not None:
          self.status = status
        if is_internal is not None:
          self.is_internal = is_internal
        if requestor_group_user_id is not None:
          self.requestor_group_user_id = requestor_group_user_id
        if assignee_group_user_id is not None:
          self.assignee_group_user_id = assignee_group_user_id
        if owner_group_user_id is not None:
          self.owner_group_user_id = owner_group_user_id
        if requestor_name is not None:
          self.requestor_name = requestor_name
        if owner_name is not None:
          self.owner_name = owner_name
        if assignee_name is not None:
          self.assignee_name = assignee_name
        if owner_account_name is not None:
          self.owner_account_name = owner_account_name
        if ticket_messages is not None:
          self.ticket_messages = ticket_messages

    @property
    def ticket_id(self):
        """
        Gets the ticket_id of this Ticket.

        :return: The ticket_id of this Ticket.
        :rtype: int
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """
        Sets the ticket_id of this Ticket.

        :param ticket_id: The ticket_id of this Ticket.
        :type: int
        """

        self._ticket_id = ticket_id

    @property
    def subject(self):
        """
        Gets the subject of this Ticket.

        :return: The subject of this Ticket.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Ticket.

        :param subject: The subject of this Ticket.
        :type: str
        """

        self._subject = subject

    @property
    def date_required_by(self):
        """
        Gets the date_required_by of this Ticket.

        :return: The date_required_by of this Ticket.
        :rtype: datetime
        """
        return self._date_required_by

    @date_required_by.setter
    def date_required_by(self, date_required_by):
        """
        Sets the date_required_by of this Ticket.

        :param date_required_by: The date_required_by of this Ticket.
        :type: datetime
        """

        self._date_required_by = date_required_by

    @property
    def severity(self):
        """
        Gets the severity of this Ticket.

        :return: The severity of this Ticket.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this Ticket.

        :param severity: The severity of this Ticket.
        :type: str
        """

        self._severity = severity

    @property
    def date_created(self):
        """
        Gets the date_created of this Ticket.

        :return: The date_created of this Ticket.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this Ticket.

        :param date_created: The date_created of this Ticket.
        :type: datetime
        """

        self._date_created = date_created

    @property
    def source(self):
        """
        Gets the source of this Ticket.

        :return: The source of this Ticket.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Ticket.

        :param source: The source of this Ticket.
        :type: str
        """

        self._source = source

    @property
    def ticket_uuid(self):
        """
        Gets the ticket_uuid of this Ticket.

        :return: The ticket_uuid of this Ticket.
        :rtype: str
        """
        return self._ticket_uuid

    @ticket_uuid.setter
    def ticket_uuid(self, ticket_uuid):
        """
        Sets the ticket_uuid of this Ticket.

        :param ticket_uuid: The ticket_uuid of this Ticket.
        :type: str
        """

        self._ticket_uuid = ticket_uuid

    @property
    def status(self):
        """
        Gets the status of this Ticket.

        :return: The status of this Ticket.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Ticket.

        :param status: The status of this Ticket.
        :type: str
        """

        self._status = status

    @property
    def is_internal(self):
        """
        Gets the is_internal of this Ticket.

        :return: The is_internal of this Ticket.
        :rtype: str
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """
        Sets the is_internal of this Ticket.

        :param is_internal: The is_internal of this Ticket.
        :type: str
        """

        self._is_internal = is_internal

    @property
    def requestor_group_user_id(self):
        """
        Gets the requestor_group_user_id of this Ticket.

        :return: The requestor_group_user_id of this Ticket.
        :rtype: int
        """
        return self._requestor_group_user_id

    @requestor_group_user_id.setter
    def requestor_group_user_id(self, requestor_group_user_id):
        """
        Sets the requestor_group_user_id of this Ticket.

        :param requestor_group_user_id: The requestor_group_user_id of this Ticket.
        :type: int
        """

        self._requestor_group_user_id = requestor_group_user_id

    @property
    def assignee_group_user_id(self):
        """
        Gets the assignee_group_user_id of this Ticket.

        :return: The assignee_group_user_id of this Ticket.
        :rtype: int
        """
        return self._assignee_group_user_id

    @assignee_group_user_id.setter
    def assignee_group_user_id(self, assignee_group_user_id):
        """
        Sets the assignee_group_user_id of this Ticket.

        :param assignee_group_user_id: The assignee_group_user_id of this Ticket.
        :type: int
        """

        self._assignee_group_user_id = assignee_group_user_id

    @property
    def owner_group_user_id(self):
        """
        Gets the owner_group_user_id of this Ticket.

        :return: The owner_group_user_id of this Ticket.
        :rtype: int
        """
        return self._owner_group_user_id

    @owner_group_user_id.setter
    def owner_group_user_id(self, owner_group_user_id):
        """
        Sets the owner_group_user_id of this Ticket.

        :param owner_group_user_id: The owner_group_user_id of this Ticket.
        :type: int
        """

        self._owner_group_user_id = owner_group_user_id

    @property
    def requestor_name(self):
        """
        Gets the requestor_name of this Ticket.

        :return: The requestor_name of this Ticket.
        :rtype: str
        """
        return self._requestor_name

    @requestor_name.setter
    def requestor_name(self, requestor_name):
        """
        Sets the requestor_name of this Ticket.

        :param requestor_name: The requestor_name of this Ticket.
        :type: str
        """

        self._requestor_name = requestor_name

    @property
    def owner_name(self):
        """
        Gets the owner_name of this Ticket.

        :return: The owner_name of this Ticket.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """
        Sets the owner_name of this Ticket.

        :param owner_name: The owner_name of this Ticket.
        :type: str
        """

        self._owner_name = owner_name

    @property
    def assignee_name(self):
        """
        Gets the assignee_name of this Ticket.

        :return: The assignee_name of this Ticket.
        :rtype: str
        """
        return self._assignee_name

    @assignee_name.setter
    def assignee_name(self, assignee_name):
        """
        Sets the assignee_name of this Ticket.

        :param assignee_name: The assignee_name of this Ticket.
        :type: str
        """

        self._assignee_name = assignee_name

    @property
    def owner_account_name(self):
        """
        Gets the owner_account_name of this Ticket.

        :return: The owner_account_name of this Ticket.
        :rtype: str
        """
        return self._owner_account_name

    @owner_account_name.setter
    def owner_account_name(self, owner_account_name):
        """
        Sets the owner_account_name of this Ticket.

        :param owner_account_name: The owner_account_name of this Ticket.
        :type: str
        """

        self._owner_account_name = owner_account_name

    @property
    def ticket_messages(self):
        """
        Gets the ticket_messages of this Ticket.

        :return: The ticket_messages of this Ticket.
        :rtype: list[TicketMessage]
        """
        return self._ticket_messages

    @ticket_messages.setter
    def ticket_messages(self, ticket_messages):
        """
        Sets the ticket_messages of this Ticket.

        :param ticket_messages: The ticket_messages of this Ticket.
        :type: list[TicketMessage]
        """

        self._ticket_messages = ticket_messages

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ticket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
