# coding: utf-8

"""
    ngDesk_Operations

    ngDesk_Operations

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Attachment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'file_extension': 'str',
        'file': 'str',
        'ticket_attachment_uuid': 'int',
        'company_id': 'str'
    }

    attribute_map = {
        'file_name': 'FILE_NAME',
        'file_extension': 'FILE_EXTENSION',
        'file': 'FILE',
        'ticket_attachment_uuid': 'TICKET_ATTACHMENT_UUID',
        'company_id': 'COMPANY_ID'
    }

    def __init__(self, file_name=None, file_extension=None, file=None, ticket_attachment_uuid=None, company_id=None):
        """
        Attachment - a model defined in Swagger
        """

        self._file_name = None
        self._file_extension = None
        self._file = None
        self._ticket_attachment_uuid = None
        self._company_id = None

        if file_name is not None:
          self.file_name = file_name
        if file_extension is not None:
          self.file_extension = file_extension
        if file is not None:
          self.file = file
        if ticket_attachment_uuid is not None:
          self.ticket_attachment_uuid = ticket_attachment_uuid
        if company_id is not None:
          self.company_id = company_id

    @property
    def file_name(self):
        """
        Gets the file_name of this Attachment.

        :return: The file_name of this Attachment.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this Attachment.

        :param file_name: The file_name of this Attachment.
        :type: str
        """

        self._file_name = file_name

    @property
    def file_extension(self):
        """
        Gets the file_extension of this Attachment.

        :return: The file_extension of this Attachment.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """
        Sets the file_extension of this Attachment.

        :param file_extension: The file_extension of this Attachment.
        :type: str
        """

        self._file_extension = file_extension

    @property
    def file(self):
        """
        Gets the file of this Attachment.

        :return: The file of this Attachment.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """
        Sets the file of this Attachment.

        :param file: The file of this Attachment.
        :type: str
        """

        self._file = file

    @property
    def ticket_attachment_uuid(self):
        """
        Gets the ticket_attachment_uuid of this Attachment.

        :return: The ticket_attachment_uuid of this Attachment.
        :rtype: int
        """
        return self._ticket_attachment_uuid

    @ticket_attachment_uuid.setter
    def ticket_attachment_uuid(self, ticket_attachment_uuid):
        """
        Sets the ticket_attachment_uuid of this Attachment.

        :param ticket_attachment_uuid: The ticket_attachment_uuid of this Attachment.
        :type: int
        """

        self._ticket_attachment_uuid = ticket_attachment_uuid

    @property
    def company_id(self):
        """
        Gets the company_id of this Attachment.

        :return: The company_id of this Attachment.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this Attachment.

        :param company_id: The company_id of this Attachment.
        :type: str
        """

        self._company_id = company_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Attachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
