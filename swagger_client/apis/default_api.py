# coding: utf-8

"""
    ngDesk_Operations

    ngDesk_Operations

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_ticket(self, ticket_id, **kwargs):
        """
        Retrievs a ticket
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ticket(ticket_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ticket_id: (required)
        :param str authentication_token:
        :param str category:
        :param str statuses:
        :param str ordered_column:
        :param str ordered_by:
        :param str client_id:
        :param str client_secret:
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_ticket_with_http_info(ticket_id, **kwargs)
        else:
            (data) = self.get_ticket_with_http_info(ticket_id, **kwargs)
            return data

    def get_ticket_with_http_info(self, ticket_id, **kwargs):
        """
        Retrievs a ticket
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_ticket_with_http_info(ticket_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ticket_id: (required)
        :param str authentication_token:
        :param str category:
        :param str statuses:
        :param str ordered_column:
        :param str ordered_by:
        :param str client_id:
        :param str client_secret:
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'authentication_token', 'category', 'statuses', 'ordered_column', 'ordered_by', 'client_id', 'client_secret']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if ('ticket_id' not in params) or (params['ticket_id'] is None):
            raise ValueError("Missing the required parameter `ticket_id` when calling `get_ticket`")


        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticket_id'] = params['ticket_id']

        query_params = []
        if 'authentication_token' in params:
            query_params.append(('authentication_token', params['authentication_token']))
        if 'category' in params:
            query_params.append(('category', params['category']))
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))
        if 'ordered_column' in params:
            query_params.append(('ordered_column', params['ordered_column']))
        if 'ordered_by' in params:
            query_params.append(('ordered_by', params['ordered_by']))
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('client_secret', params['client_secret']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/tickets/{ticket_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Ticket',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tickets(self, **kwargs):
        """
        Retrieve tickets
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tickets(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float authentication_token: User athentication uuid
        :param int start: Start query value
        :param int length: Number of rows query
        :param int draw: Number of times table has been reloaded
        :param str q: Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES
        :param str sort_by: Column name to order table by
        :param str sort_by_order: Sort by ascending or descending
        :param str passed_account_id:
        :param str passed_user_id:
        :param int view_id: View Id
        :param str client_id: API ID
        :param str client_secret: API Secret
        :return: list[Ticket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tickets_with_http_info(**kwargs)
        else:
            (data) = self.get_tickets_with_http_info(**kwargs)
            return data

    def get_tickets_with_http_info(self, **kwargs):
        """
        Retrieve tickets
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tickets_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float authentication_token: User athentication uuid
        :param int start: Start query value
        :param int length: Number of rows query
        :param int draw: Number of times table has been reloaded
        :param str q: Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES
        :param str sort_by: Column name to order table by
        :param str sort_by_order: Sort by ascending or descending
        :param str passed_account_id:
        :param str passed_user_id:
        :param int view_id: View Id
        :param str client_id: API ID
        :param str client_secret: API Secret
        :return: list[Ticket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authentication_token', 'start', 'length', 'draw', 'q', 'sort_by', 'sort_by_order', 'passed_account_id', 'passed_user_id', 'view_id', 'client_id', 'client_secret']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tickets" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'authentication_token' in params:
            query_params.append(('authentication_token', params['authentication_token']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'length' in params:
            query_params.append(('length', params['length']))
        if 'draw' in params:
            query_params.append(('draw', params['draw']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))
        if 'sort_by_order' in params:
            query_params.append(('sort_by_order', params['sort_by_order']))
        if 'passed_account_id' in params:
            query_params.append(('passed_account_id', params['passed_account_id']))
        if 'passed_user_id' in params:
            query_params.append(('passed_user_id', params['passed_user_id']))
        if 'view_id' in params:
            query_params.append(('view_id', params['view_id']))
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('client_secret', params['client_secret']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/tickets', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Ticket]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_messages(self, body, ticket_id, **kwargs):
        """
        Insert a messages
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_messages(body, ticket_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Ticket body: The request body for the operation (required)
        :param str ticket_id: (required)
        :param str authentication_token: User athentication
        :param str client_id: api client
        :param str client_secret: api secret
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_messages_with_http_info(body, ticket_id, **kwargs)
        else:
            (data) = self.post_messages_with_http_info(body, ticket_id, **kwargs)
            return data

    def post_messages_with_http_info(self, body, ticket_id, **kwargs):
        """
        Insert a messages
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_messages_with_http_info(body, ticket_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Ticket body: The request body for the operation (required)
        :param str ticket_id: (required)
        :param str authentication_token: User athentication
        :param str client_id: api client
        :param str client_secret: api secret
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'ticket_id', 'authentication_token', 'client_id', 'client_secret']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_messages`")
        # verify the required parameter 'ticket_id' is set
        if ('ticket_id' not in params) or (params['ticket_id'] is None):
            raise ValueError("Missing the required parameter `ticket_id` when calling `post_messages`")


        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticket_id'] = params['ticket_id']

        query_params = []
        if 'authentication_token' in params:
            query_params.append(('authentication_token', params['authentication_token']))
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('client_secret', params['client_secret']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/tickets/{ticket_id}/messages', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_tickets(self, body, **kwargs):
        """
        Insert a tickets
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_tickets(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[TicketMessage] body: The request body for the operation (required)
        :param float authentication_token: User athentication uuid
        :param str client_id:
        :param str client_secret:
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_tickets_with_http_info(body, **kwargs)
        else:
            (data) = self.post_tickets_with_http_info(body, **kwargs)
            return data

    def post_tickets_with_http_info(self, body, **kwargs):
        """
        Insert a tickets
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_tickets_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[TicketMessage] body: The request body for the operation (required)
        :param float authentication_token: User athentication uuid
        :param str client_id:
        :param str client_secret:
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authentication_token', 'client_id', 'client_secret']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tickets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_tickets`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'authentication_token' in params:
            query_params.append(('authentication_token', params['authentication_token']))
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('client_secret', params['client_secret']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/tickets', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Ticket',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_tickets(self, body, **kwargs):
        """
        Update tickets
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_tickets(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[Ticket] body: The request body for the operation (required)
        :param bool authentication_token: User athentication uuid
        :param str client_id:
        :param str client_secret:
        :return: list[Ticket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_tickets_with_http_info(body, **kwargs)
        else:
            (data) = self.put_tickets_with_http_info(body, **kwargs)
            return data

    def put_tickets_with_http_info(self, body, **kwargs):
        """
        Update tickets
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_tickets_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[Ticket] body: The request body for the operation (required)
        :param bool authentication_token: User athentication uuid
        :param str client_id:
        :param str client_secret:
        :return: list[Ticket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authentication_token', 'client_id', 'client_secret']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_tickets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_tickets`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'authentication_token' in params:
            query_params.append(('authentication_token', params['authentication_token']))
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'client_secret' in params:
            query_params.append(('client_secret', params['client_secret']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/tickets', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Ticket]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
